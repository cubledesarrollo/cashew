#!/bin/bash
#
# Command: init
# Actualiza los ficheros de traduccion de Cashew.
#
function init {
    stamp=`date +%s`
    if [ -f ./application/config/config.php ]; then
        mv ./application/config/config.php ./application/config/config-$stamp.php
    fi
    if [ -f ./application/config/database.php ]; then
        mv ./application/config/database.php ./application/config/database-$stamp.php
    fi
    cp ./application/config/config.php.dist ./application/config/config.php
    cp ./application/config/database.php.dist ./application/config/database.php
}
#
# Command: translate
# Actualiza los ficheros de traduccion de Cashew.
#
function translate {
    find ./application/views -iname "*.php" > files.txt
    find ./application/controllers -iname "*.php" >> files.txt
    find ./application/errors -iname "*.php" >> files.txt
    xgettext -L PHP --indent --from-code=UTF-8 -f files.txt -o messages.pot
    for file in `ls application/language/locales/`; do
    if [ $file != 'index.html' ]; then
        messages=./application/language/locales/$file/LC_MESSAGES
        if [ -f $messages/messages.po ]; then
        msgmerge -o $messages/messages.po $messages/messages.po messages.pot
        else
        cp messages.pot $messages/messages.po
        fi
        msgfmt $messages/messages.po
        mv messages.mo $messages/
    fi
    done
    rm files.txt
    rm messages.pot
}
#
# Command: urli18n
# Internacionalizacion de las URLs de Cashew.
#
function urli18n {
echo "/** --- AUTOGENERATED --- **/" > res.txt
echo "" >> res.txt
for file in $(find application/controllers/ -iname "*.php"); do
    class=$(cat $file | egrep 'class' | awk '{print $2}')
    cat > temp.php <<EOF
<?php
define('BASEPATH', '');
include "system/core/Controller.php";
include "application/core/MY_Controller.php";
include "$file";
\$class = "$class";
\$rc = new ReflectionClass(\$class);
\$n = preg_match_all("/@(.+) (.+) (.+)/m", \$rc->getDocComment(), \$matches);
for (\$i = 0; \$i < \$n; \$i++)
{
    echo '\$alias[\''.strtolower(\$matches[3][\$i]).'\'] = array ('.PHP_EOL;
    echo "\t'lang' => '".\$matches[2][\$i]."',".PHP_EOL;
    echo "\t'name' => '".strtolower(\$class)."',".PHP_EOL;
    echo "\t'method' => array (".PHP_EOL;
    \$methods = \$rc->getMethods();
    foreach(\$methods as \$method)
    {
        if (\$method->class == \$class )
        {
            \$m = preg_match_all("/@(.+) (.+) (.+)/m", \$method->getDocComment(), \$matches_method);
            for (\$j = 0; \$j < \$m; \$j++)
            {
                if (\$matches_method[2][\$j] == \$matches[2][\$i])
                {
                    echo "\t\t'".trim(\$matches_method[3][\$i])."' => '".\$method->name."',".PHP_EOL;
                    break;
                }
            }
        }
    }
    echo "\t)\n);".PHP_EOL.PHP_EOL;
}
EOF
    php -f temp.php >> res.txt
    rm temp.php
done;
n=$(grep -n "AUTOGENERATED" application/config/urli18n.php | awk -F':' '{print $1}')
n=$(($n - 1))
head -n$n application/config/urli18n.php > res_final.txt
cat res.txt >> res_final.txt
cat res_final.txt > application/config/urli18n.php
rm res.txt
rm res_final.txt
}
#
# Command: migrate
# Actualiza la base de datos.
#
function migrate {
    php index.php tools migrate
    php index.php tools asserts
}
#
# Command: tests
# Ejecuta los tests unitarios
#
function tests {
    cd application/tests
    phpunit unit/
    cd ../..
}
#
# Command: production
# Crea el fichero bootsrap.css con los cambios que se hayan podido realizar
# y cambia el entorno a produccion.
#
function production {
    for i in $(ls less/*.less | awk -F. '{print$1}' | awk -F'/' '{print $2}');
    do
        lessc --compress ./less/$i.less > ./css/$i.css
    done
    sed -i "s/define('ENVIRONMENT', 'development')/define('ENVIRONMENT', 'production')/g" index.php
}
#
# Command: development
# Cambia el entorno a desarrollo.
#
function development {
    sed -i "s/define('ENVIRONMENT', 'production')/define('ENVIRONMENT', 'development')/g" index.php
}
######################################################
if [ $# -ne 1 ]; then
  echo 1>&2 "Usage: $0 command"
  exit 1
fi
command=$1
if [ "$command" == "migrate" ]; then
    migrate
elif [ "$command" == "init" ]; then
    init
elif [ "$command" == "translate" ]; then
    translate
elif [ "$command" == "urli18n" ]; then
    urli18n
elif [ "$command" == "production" ]; then
    production
elif [ "$command" == "development" ]; then
    development
elif [ "$command" == "tests" ]; then
    tests
else
    php index.php tools $command
fi
